@using CA3F1.Shared.Models﻿
@using Newtonsoft.Json
<!-- Pages/F1DriverSearch.razor -->
@page "/DriverSearch"

<style>
    /* Additional styles to ensure the image and content are aligned properly */
    .card-horizontal {
        display: flex;
        flex: 1 1 auto;
    }
</style>

<h3>F1 Driver Search</h3>
<br />

<div class="container">
    <div class="row">
        <div class="col-sm-3">
        </div>
        <div class="col-sm-6 d-flex flex-column align-items-center justify-content-center">
             <label for="driverSearch">Enter Driver Name:</label>
            <input type="text" class="form-control" id="driverSearch" placeholder="Lewis"  @bind="searchParameter" required/>
            <br />
            <button @onclick="Search" class="btn btn-danger" type="submit">Search</button>

        </div>
        <div class="col-sm-3">
        </div>
    </div>
</div>



@if (isLoading)
{
    <p>Loading...</p>
}
else if (driver_data != null && driver_data.response != null && driver_data.response.Any())
{
    <br />
    <br />

    @foreach (var driver in driver_data.response)
    {
        var mostRecentTeam = driver.teams.OrderByDescending(t => t.season).FirstOrDefault();
        var modalId = $"exampleModal{driver.id}"; // Assuming each driver has a unique 'id' property

        <br />
        <br />
        <div class="container my-5">
            <div class="card mb-3">
                <div class="row g-0 align-items-center">
                    <div class="col-md-3">
                        <!-- Driver Image -->
                        <img src="@driver.image" class="img-fluid rounded-start" alt="Driver Image" style="max-width: 100%; border-right: solid 1px #dfdfdf;">
                    </div>
                    <div class="col-md-8">
                        <!-- Information Section -->
                        <div class="row">
                            <div class="col-md-6 text-center">
                                <h3 class="card-title"><b><u>Career Points</u></b></h3>
                                <h5>@driver.career_points</h5>
                            </div>
                            <div class="col-md-6 text-center">
                                <h3 class="card-title"><b><u>Grand Prix Entered</u></b></h3>
                                <h5>@driver.grands_prix_entered</h5>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 text-center">
                                <h3 class="card-title"><b><u>Podiums</u></b></h3>
                                <h5>@driver.podiums</h5>
                            </div>
                            <div class="col-md-6 text-center">
                                <h3 class="card-title"><b><u>World Championships</u></b></h3>
                                <h5>@driver.world_championships</h5>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Footer with additional information -->
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        @driver.name // @mostRecentTeam  <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#@modalId">
                            Launch demo modal
                        </button>
                    </li>
                </ul>
            </div>
        </div>


        <!-- Modal -->
        <div class="modal fade" id="@modalId" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="exampleModalLabel">Modal title</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        ...
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary">Save changes</button>
                    </div>
                </div>
            </div>
        </div>


    }
}
else if (error != null)
{
    <p style="color: red;">Error: @error</p>
}




<script>
    document.addEventListener('DOMContentLoaded', (event) => {
        jQuery.noConflict();
        const myModal = jQuery('#exampleModal');
        if (myModal.length) {
            myModal.on('shown.bs.modal', () => {
                const myInput = jQuery('#myInput');
                if (myInput.length) {
                    myInput.focus();
                }
            });
        }
    });
</script>

@code {
    private string searchParameter;
    private DriverDetailRoot driver_data;
    private string searchResult;
    private string error;
    private bool isLoading;

    private async Task Search()
    {
        isLoading = true;

        try
        {
            using (var client = new HttpClient())
            {
                var request = new HttpRequestMessage
                    {
                        Method = HttpMethod.Get,
                        RequestUri = new Uri($"https://api-formula-1.p.rapidapi.com/drivers?search={searchParameter}"),
                        Headers =
                {
                        { "X-RapidAPI-Key", "5f3853b99amsh601f7aab225fb6ep1a2569jsndd2d15834371" },
                        { "X-RapidAPI-Host", "api-formula-1.p.rapidapi.com" },
                    },
                    };

                using (var response = await client.SendAsync(request))
                {
                    response.EnsureSuccessStatusCode();
                    var responseBody = await response.Content.ReadAsStringAsync();
                    Console.WriteLine(responseBody);
                    driver_data = JsonConvert.DeserializeObject<DriverDetailRoot>(responseBody);
                    StateHasChanged(); // Trigger a re-render of the component

                }
            }
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
}